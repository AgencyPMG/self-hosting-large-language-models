#!/usr/bin/env bash

set -e

pushd "$(git rev-parse --show-toplevel)"

if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <model> <version>"
  exit 1
fi

model="$1"
version="$2"

# disable the AWS CLI using a pager
export AWS_PAGER=""

modelDefaults="$(aws sagemaker describe-model \
    --model-name "self-hosting-demo-$model-template")"
role="$(echo $modelDefaults | jq -r .ExecutionRoleArn)"
environment="$(echo $modelDefaults | jq -r .PrimaryContainer.Environment)"
image="$(echo $modelDefaults | jq -r .PrimaryContainer.Image)"

modelName="self-hosting-demo-$model-$version"

endpointConfig=$(aws sagemaker describe-endpoint-config \
    --endpoint-config-name self-hosting-demo-$model-template \
    --query 'ProductionVariants[0]' | jq -c ".ModelName = \"$modelName\" | del(.VolumeSizeInGB)"
)


# 1. Build the model into a tarball locally
rm -rf "dist/$model.tar.gz"
mkdir -p "dist/$model"
tar -czvf "dist/$model.tar.gz" --directory "models/$model" .

# 2. upload the tarball to s3 where Sagemaker can get to it
s3Url="s3://ailabs-staging-self-hosting-demo-models/inf/$model/$version/model.tar.gz"
aws s3 cp "dist/$model.tar.gz" "$s3Url"

# 3. create a new model pointint to the tarball, we pull the config for this from
# the "template" model created in infra
aws sagemaker create-model \
    --model-name "$modelName" \
    --primary-container "{\"Image\": \"$image\", \"ModelDataUrl\":\"$s3Url\", \"Environment\": $environment}"\
    --execution-role-arn "$role"

# 4. Create the endpoint configuration based on the template config, but swap in the
# new model name
aws sagemaker create-endpoint-config \
    --endpoint-config-name "self-hosting-demo-$model-$version" \
    --production-variants "$endpointConfig"

# 5. update the endpoint with the new configuration
aws sagemaker update-endpoint \
    --endpoint-name "self-hosting-demo-$model" \
    --endpoint-config-name "self-hosting-demo-$model-$version"
